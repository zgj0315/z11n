//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tbl_host")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub agent_id: String,
    pub name: Option<String>,
    pub host_name: Option<String>,
    pub os_version: Option<String>,
    pub cpu_arch: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub content: Vec<u8>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tbl_agent::Entity",
        from = "Column::AgentId",
        to = "super::tbl_agent::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TblAgent,
}

impl Related<super::tbl_agent::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblAgent.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
