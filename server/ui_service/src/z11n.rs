// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LlmTaskAnswers {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<LlmTaskAnswer>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LlmTaskAnswer {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LlmTaskId {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LlmTaskQuestionReq {
    #[prost(string, tag = "1")]
    pub model: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prompt: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LlmTaskQuestionRsp {
    #[prost(message, optional, tag = "1")]
    pub llm_task_question: ::core::option::Option<LlmTaskQuestion>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LlmTaskQuestion {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub model: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub prompt: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartbeatRsp {
    #[prost(oneof = "heartbeat_rsp::Task", tags = "1")]
    pub task: ::core::option::Option<heartbeat_rsp::Task>,
}
/// Nested message and enum types in `HeartbeatRsp`.
pub mod heartbeat_rsp {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Task {
        #[prost(message, tag = "1")]
        UploadHost(super::UploadHost),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UploadHost {
    #[prost(enumeration = "upload_host::InfoType", tag = "1")]
    pub info_type: i32,
}
/// Nested message and enum types in `UploadHost`.
pub mod upload_host {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum InfoType {
        System = 0,
        Disk = 1,
        Network = 2,
    }
    impl InfoType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::System => "SYSTEM",
                Self::Disk => "DISK",
                Self::Network => "NETWORK",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SYSTEM" => Some(Self::System),
                "DISK" => Some(Self::Disk),
                "NETWORK" => Some(Self::Network),
                _ => None,
            }
        }
    }
}
/// 心跳消息请求结构体
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterReq {
    /// agent唯一编号，必填
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    /// agent版本，必填
    #[prost(string, tag = "2")]
    pub agent_version: ::prost::alloc::string::String,
}
/// 心跳消息请求结构体
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRsp {
    /// 认证token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HostReq {
    #[prost(message, optional, tag = "1")]
    pub system: ::core::option::Option<SystemInfo>,
    #[prost(message, repeated, tag = "2")]
    pub disks: ::prost::alloc::vec::Vec<DiskInfo>,
    #[prost(message, repeated, tag = "3")]
    pub networks: ::prost::alloc::vec::Vec<NetworkInfo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemInfo {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub kernel_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub os_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub host_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "5")]
    pub cpu_arch: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub kernel_long_version: ::prost::alloc::string::String,
    #[prost(uint64, tag = "7")]
    pub total_memory: u64,
    #[prost(uint64, tag = "8")]
    pub total_swap: u64,
    #[prost(message, repeated, tag = "9")]
    pub processes: ::prost::alloc::vec::Vec<ProcessInfo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessInfo {
    #[prost(uint32, tag = "1")]
    pub pid: u32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub exe: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiskInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file_system: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub mount_point: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub kind: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub total_space: u64,
    #[prost(uint64, tag = "6")]
    pub available_space: u64,
    #[prost(bool, tag = "7")]
    pub is_removable: bool,
    #[prost(bool, tag = "8")]
    pub is_read_only: bool,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkInfo {
    #[prost(string, tag = "1")]
    pub interface_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub total_received: u64,
    #[prost(uint64, tag = "3")]
    pub total_transmitted: u64,
    #[prost(string, repeated, tag = "4")]
    pub addrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
